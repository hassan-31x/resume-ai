// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  templates             Template[]             @relation("CreatedTemplates")
  
  // Personal information
  personalInfo          PersonalInfo?
  workExperiences       WorkExperience[]
  educationEntries      Education[]
  projectEntries        Project[]
  certificateEntries    Certificate[]
  skillEntries          SkillCategory[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

enum TemplateCategory {
  PROFESSIONAL
  ACADEMIC
  CREATIVE
  TECHNICAL
  ENTRY_LEVEL
  EXECUTIVE
  OTHER
}

model Template {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  
  // Component-based HTML structure (replacing htmlContent)
  headerHTML      String       // Header with name and title
  contactHTML     String       // Contact information section
  educationTitleHTML String    // Education section title
  educationItemHTML String     // Individual education item
  experienceTitleHTML String   // Experience section title
  experienceItemHTML String    // Individual experience item
  skillsTitleHTML String       // Skills section title
  skillsItemHTML  String       // Individual skill or skill category
  projectsTitleHTML String?    // Projects section title (optional)
  projectsItemHTML String?     // Individual project item (optional)
  
  // Keep single CSS field
  cssStyles   String           // CSS styles for the template
  thumbnail   String?          // URL to template thumbnail image
  category    TemplateCategory @default(PROFESSIONAL)
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isPublic    Boolean          @default(true)
  
  // Template styling options
  primaryColor    String       @default("#4A6CF7")  // Primary color for accents
  secondaryColor  String       @default("#6E82A6")  // Secondary color for less important elements
  fontFamily      String       @default("'Inter', sans-serif") // Main font family
  fontSize        Int          @default(14)         // Base font size in px
  lineHeight      Float        @default(1.5)        // Base line height
  sectionSpacing  Int          @default(24)         // Space between sections in px
  itemSpacing     Int          @default(12)         // Space between items in px
  
  // Relation to the user who created the template
  createdBy   User             @relation("CreatedTemplates", fields: [userId], references: [id])
  userId      String           @db.ObjectId

  // For easy identification of admin-created templates
  isAdminCreated Boolean       @default(false)
}

// Personal information models for users

model PersonalInfo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Basic personal details
  firstName   String?
  lastName    String?
  jobTitle    String?
  
  // Contact information
  email       String?
  phone       String?
  website     String?
  
  // Location
  city        String?
  state       String?
  country     String?
  
  // Online presence
  linkedinUrl String?
  githubUrl   String?
  twitterUrl  String?
  portfolioUrl String?
  
  // Professional summary
  professionalSummary String?
  
  // Professional photo
  profilePhotoUrl String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User relation (one-to-one)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique @db.ObjectId
}

model WorkExperience {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Company details
  companyName   String
  jobTitle      String
  location      String?
  
  // Dates
  startDate     DateTime
  endDate       DateTime?
  isCurrentJob  Boolean  @default(false)
  
  // Job details
  responsibilities String[]
  achievements    String[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // User relation
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}

model Education {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // School details
  schoolName    String
  degree        String
  fieldOfStudy  String?
  location      String?
  
  // Dates
  startDate     DateTime
  endDate       DateTime?
  isCurrentlyStudying Boolean @default(false)
  
  // Academic details
  gpa           String?
  achievements  String[]
  relevantCourses String[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // User relation
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}

model Project {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Project details
  title         String
  description   String
  
  // Project links
  projectUrl    String?
  githubUrl     String?
  
  // Dates
  startDate     DateTime?
  endDate       DateTime?
  isOngoing     Boolean  @default(false)
  
  // Project information
  technologies  String[]
  keyPoints     String[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // User relation
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}

model Certificate {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Certificate details
  name              String
  issuingOrganization String
  issueDate         DateTime
  expirationDate    DateTime?
  neverExpires      Boolean  @default(false)
  
  // Certificate links
  credentialId      String?
  credentialUrl     String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // User relation
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
}

model SkillCategory {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Category details
  name              String
  
  // Skills in this category
  skills            Skill[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // User relation
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
}

model Skill {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Skill details
  name              String
  proficiencyLevel  Int?     // 1-5 scale
  
  // Category relation
  category          SkillCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String   @db.ObjectId
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
